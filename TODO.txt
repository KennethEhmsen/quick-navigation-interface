### Design

* Break into Backbone templates when start implementing behavior
* Highlight exact query matches in link titles w/ bold


### Behavior

* Create Backbone models, collections and views for the interface
	* One collection for all links (to search against)
	* Another collection for matches (to display)
* Watch search input and filter the active collection based on it
	* Find a good JS implementation of Levenshtein
		* https://stackoverflow.com/questions/11919065/sort-an-array-by-the-levenshtein-distance-with-best-performance-in-javascript
	* Search by title alone, or title + url?
* For WP menus, add in siblings with a higher distance than query matches
* Capture up and down keys and move active class to corresponding list items


### Misc

* sourcemap xss issues? remove b/c not useful anyway?
* update grunt task versions to latest available
* Move concat/minified files to separate folder to so can phpstorm exclude them from code hints etc to avoid collisions?
* Read https://ozkatz.github.io/avoiding-common-backbonejs-pitfalls.html
* Better shortcut than ` ? It's not as easy to get to on keyboard as /, but that has conflicts. ctrl/option/super + w would have conflicts on various OSes and browsers
	* How easy is it on various keyboard layouts?
* Make sure ` doesn't conflict w/ any browser shortcuts.
	* Check different OSes and browsers
* Setup qunit tests


### 0.1 launch
* When committing to wporg repo, save screenshots to assets dir instead of plugin dir



### v2
* Include content in results
	* Use Jetpack Omnisearch under the hood
	* Maybe fallback to a basic post/comment search if Omnisearch not available
	* Build an index mapping urls to keywords and titles
		* store in transient, then enqueue as .json file, separate from normal js file, so it can be cached client side rather than sent with every page
		* use an efficient structure like a b-tree.
		* omnisearch indexs with elasticsearch on wpcom? check if cache results locally. maybe just copy that index and add on-page links to it, then send to client.
		* search that file for content, on-page links, everything. that way don't have to submit ajax request for every search
* Listen for new links added by JS?
* Add ability to search by additional keywords that are associated w/ each link, not just the title
	* Can pull the keywords from link title tags, post excerpts, etc
* Maybe show most popular links by default, and then track what links they visit and show those as default